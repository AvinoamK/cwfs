------------------------------------------------------------
Curvature Wavefront Sensing (CWFS) Software v1.0
------------------------------------------------------------

    This software package consists of a set of Python codes that take a pair of defocused star images equally spaced on both size of the optical focus, and calculate the incoming wavefront. The underlying baseline algorithms implemented are the iterative FFT method by the Roddiers and the series expansion based method by Gureyev and Nugent. We have made several modifications to make them work for LSST, to overcome challenges including a highly obscured pupil, the fast f-number, pupil distortion and vignetting at the field corners, and variation of the wavefront over the area covered by the split-sensors.
	    
    Please reference Xin et al., arXiv:1506.04839. As of September 2015, the paper has been accepted for publication by Applied Optics.

    Note that the off-axis corrections and pupil geometry as functions of field position are specific to each telescope. We have modelled these for LSST. The data can be found in data/lsst/. It may require some additional work to model these properly for your application.
	
    Authors:    Bo Xin, Chuck Claver
Large Synoptic Survey Telescope (LSST)

We'd like to thank Michael Reuter for the help with Python programming.
	
-------------
INSTALLATION:
-------------

    The code has been tested under:
    - Python 2.7.10
    - Python 3.4.3

    The following modules are needed:
    NumPy
    SciPy
    Astropy (for reading in fits images)
    Matplotlib (for making plots)

    You need to add "$PWD/source/" to your $PYTHONPATH.
	(see ./setupEnv)
	
------
USAGE#1: (on command line)
------

    To show the help message
    
    ./cwfs -h

    usage examples:

    ./cwfs z11_0.25_intra.txt z11_0.25_extra.txt -dir ./testImages/LSST_NE_SN25 -ixy 1.185 1.185 -exy 1.185 1.185 -m offAxis -a exp -d -1

------
USAGE#2: (in Python environment)
------

    Please see the the two iPython notebooks in the home directory:
	example1.ipynb
	example2.ipynb

    example1.ipynb shows how a user defines the two defocused images, the instrument, the algorithm, then run everything with the default settings.
    	
    example2.ipynb shows a more complex work session, where the user runs the iterations manually, and examine the results after each iteration.
	
------------
Directories:
------------

		data:            all input data (instrument specific data and algorithm parameters)
		output:         suggested dir for your outputs
		source:         all source files 
		testImages    intra and extra images on which you may run some initial tests
		validation      data used together with validation.py for validation tests
		    
-------------------
Files in top level:
-------------------

		cwfs                       main script
		COPYING                 license file
		README                  this file
		setupEnv                 bash command to set up the python environment needed
		validation.py            Python script for validation tests (compare to Matlab results)